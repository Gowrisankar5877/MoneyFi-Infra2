trigger:
  - main 

resources:
  - repo: self

variables:
  poolname: agentpool
  vmImageName: 'gowriAM'
  terraformWorkingDir: '.' 
  azureSubscription: '9d2931f3-e261-4c38-a081-22cd6b3df6e8'
  aksCentralName: MoneyFi-AKS1
  aksWestName: MoneyFi-aks2
  resourceGroupName: MoneyFi-RG
  
stages:
- stage: Terraform_Infra
  displayName: "Provision Infrastructure"
  jobs:
  - job: Terraform
    displayName: "Terraform Plan & Apply"
    pool:
      name: $(poolname)
      vmImage: $(vmImageName)
    steps:
    - checkout: self

    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Logged into Azure"

    - script: |
        cd $(terraformWorkingDir)
        terraform version
      displayName: 'Check Terraform Version'

    - script: |
        cd $(terraformWorkingDir)
        terraform init
      displayName: 'Terraform Init '

    - script: |
        cd $(terraformWorkingDir)
        terraform plan -var-file="terraform.tfvars" -out=tfplan
      displayName: 'Terraform Plan'

    - script: |
        cd $(terraformWorkingDir)
        terraform apply   -auto-approve tfplan
      displayName: 'Terraform Apply'
    

    - task: AzureCLI@2
      displayName: Enable CSI Driver on Central AKS
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az aks enable-addons \
          --addons azure-keyvault-secrets-provider \
          --name $(aksCentralName) \
          --resource-group $(resourceGroupName) || true

    - task: AzureCLI@2
      displayName: Enable CSI Driver on West AKS
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az aks enable-addons \
            --addons azure-keyvault-secrets-provider \
            --name $(aksWestName) \
            --resource-group $(resourceGroupName) ||true

    # - task: AzureCLI@2
    #   displayName: Get Credentials for Central AKS
    #   inputs:
    #     azureSubscription: $(azureSubscription)
    #     scriptType: bash
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       az aks get-credentials \
    #         --name $(aksCentralName) \
    #         --resource-group $(resourceGroupName) \
    #         --admin --overwrite-existing 

    # - script: |
    #     kubectl apply -f secretprovider.yml --validate=false
    #   displayName: Apply SecretProviderClass to Central AKS

    # - task: AzureCLI@2
    #   displayName: Get Credentials for West AKS
    #   inputs:
    #     azureSubscription: $(azureSubscription)
    #     scriptType: bash
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       az aks get-credentials \
    #         --name $(aksWestName) \
    #         --resource-group $(resourceGroupName) \
    #         --admin --overwrite-existing

    # - script: |
    #     kubectl apply -f secretprovider.yml --validate=false
    #   displayName: Apply SecretProviderClass to West AKS

- stage: Configure_Jumpbox_AKS
  displayName: "Configure AKS via Jumpbox"
  dependsOn: Terraform_Infra
  condition: succeeded()
  jobs:
  - job: SSH_Into_Jumpbox
    displayName: "Install Tools & Apply SecretProvider via Jumpbox"
    pool:
      name: $(poolname)
      vmImage: $(vmImageName)
    steps:
    - script: |
        sudo apt-get update && sudo apt-get install -y sshpass
        echo "Copying secretprovider.yml to jumpbox..."
        sshpass -p '1qaz2wsx3edc!23' scp -o StrictHostKeyChecking=no secretprovider.yml azureuser@4.206.141.112:/home/azureuser/secretprovider.yml
      displayName: "Copy secretprovider.yml to Jumpbox"

    - script: |
        sudo apt-get update && sudo apt-get install -y sshpass

        echo "Connecting to Jumpbox..."
        sshpass -p "1qaz2wsx3edc!23" ssh -o StrictHostKeyChecking=no azureuser@4.206.141.112 '
          echo "Installing Azure CLI..."
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

          echo "Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

          echo "Logging into Azure using Managed Identity..."
          az login --identity || az login

          echo "Getting AKS Central credentials..."
          #az aks get-credentials --name MoneyFi-AKS1 --resource-group MoneyFi-RG --admin --overwrite-existing
          az account set --subscription 1674f375-e996-4423-bd25-e0e8f6e76d13
          az aks get-credentials --resource-group MoneyFi-RG --name MoneyFi-AKS1 --overwrite-existing

          echo "Applying SecretProviderClass to Central..."
          kubectl apply -f secretprovider.yml --validate=false

          echo "Getting AKS West credentials..."
          #az aks get-credentials --name MoneyFi-aks2 --resource-group MoneyFi-RG --admin --overwrite-existing
          az account set --subscription 1674f375-e996-4423-bd25-e0e8f6e76d13
          az aks get-credentials --resource-group MoneyFi-RG --name MoneyFi-aks2 --overwrite-existing
          echo "Applying SecretProviderClass to West..."
          kubectl apply -f secretprovider.yml --validate=false
        '
      displayName: "SSH and Configure AKS"


- stage: Execute_SQL_Script
  displayName: "Execute SQL on Azure SQL DB"
  dependsOn: Configure_Jumpbox_AKS
  condition: succeeded()
  jobs:
  - job: Run_SQL_From_Jumpbox
    displayName: "Run SQL Script on Azure SQL"
    pool:
      name: $(poolname)
      vmImage: $(vmImageName)
    steps:
    - script: |
        echo "Copying init_db.sql to jumpbox..."
        sshpass -p '1qaz2wsx3edc!23' scp -o StrictHostKeyChecking=no init.sql azureuser@4.206.141.112:/home/azureuser/init.sql
      displayName: "Copy SQL Script to Jumpbox"

    - script: |
        sshpass -p '1qaz2wsx3edc!23' ssh -o StrictHostKeyChecking=no azureuser@4.206.141.112 '
          echo "Installing SQL tools..."
          curl -s https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          sudo apt-add-repository "$(curl -s https://packages.microsoft.com/config/ubuntu/22.04/prod.list)"
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev

          echo "Running SQL script..."
          /opt/mssql-tools/bin/sqlcmd -S moneyfisqlserver.database.windows.net -d moneyfi_db -U gowri -P Pp@029833 -i init.sql
        '
      displayName: "Execute SQL from Jumpbox"
